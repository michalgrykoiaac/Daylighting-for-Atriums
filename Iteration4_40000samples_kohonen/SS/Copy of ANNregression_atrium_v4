{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ANNregression_atrium_v3","provenance":[{"file_id":"1AZhYbhCDUojNdP4S-Tk8wgDt-ul9ChJS","timestamp":1653682758675}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aavFGckZVCfU"},"source":["#Numerical regression"]},{"cell_type":"markdown","metadata":{"id":"2PvW4Hn9VFIS"},"source":["in this example we will use Keras to predict wages based on various professional and demographic factors."]},{"cell_type":"code","metadata":{"id":"vwueWxGEVLk1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654431111262,"user_tz":-60,"elapsed":219,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"bb46b07e-7bd0-4514-c9fc-9ba96ebc7136"},"source":["# Import standard Libraries\n","import pandas as pd\n","import seaborn as sns\n","import altair as alt\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import joblib\n","\n","\n","sns.set(rc={'figure.figsize':(10,10)})\n","print(\"imports ok\")"],"execution_count":92,"outputs":[{"output_type":"stream","name":"stdout","text":["imports ok\n"]}]},{"cell_type":"markdown","metadata":{"id":"n74tPoRCCyJK"},"source":["##Load Data"]},{"cell_type":"code","metadata":{"id":"UDsLccXgE69X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654428863526,"user_tz":-60,"elapsed":1245,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"e33950fb-3196-4f0c-e6be-1fcd6c98132c"},"source":["#connect google drive to this colab\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"a13oEGYhFaOk","executionInfo":{"status":"ok","timestamp":1654428865960,"user_tz":-60,"elapsed":203,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}}},"source":["# Load data\n","data = pd.read_csv('/content/gdrive/MyDrive/ColabNotebooks/DataEncoding/atrium_SDA+ASE_regression_analysis/atrium_SDA+ASE_v3_2933_samples.csv')\n","#pd.set_option('display.max_columns', None)\n","#data.dropna(inplace=True)"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"ahqyPaG4ZHCC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654428870637,"user_tz":-60,"elapsed":315,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"84b7d50f-141b-4cd4-99ed-aa537506ba98"},"source":["print(data.info())"],"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2933 entries, 0 to 2932\n","Data columns (total 17 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   typicalFacadeGlazingRatio  2933 non-null   float64\n"," 1   typicalFacadeWindowWidth   2933 non-null   int64  \n"," 2   groundFacadeGlazingRatio   2933 non-null   float64\n"," 3   groundFacadeWindowWidth    2933 non-null   int64  \n"," 4   buildingDepth              2933 non-null   int64  \n"," 5   balconyWidth               2933 non-null   int64  \n"," 6   atriumArea                 2933 non-null   int64  \n"," 7   aspectRatio                2933 non-null   float64\n"," 8   groundFloorHeight          2933 non-null   float64\n"," 9   typicalfloorHeight         2933 non-null   float64\n"," 10  numberLevels               2933 non-null   int64  \n"," 11  groundSDA                  2933 non-null   float64\n"," 12  firstSDA                   2933 non-null   float64\n"," 13  groundASE                  2933 non-null   float64\n"," 14  firstASE                   2933 non-null   float64\n"," 15  groundViewPercentage       2933 non-null   float64\n"," 16  firstViewPercentage        2933 non-null   float64\n","dtypes: float64(11), int64(6)\n","memory usage: 389.7 KB\n","None\n"]}]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H8Trw_aONAfI","executionInfo":{"status":"ok","timestamp":1654428872258,"user_tz":-60,"elapsed":212,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"3d6f371c-8d79-4954-9e43-e7341de24206"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2933, 17)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"cAb6E4TZZohN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654428876337,"user_tz":-60,"elapsed":5,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"18a2fe4f-8296-4205-a802-222ef7774320"},"source":["for colname, col in data.iteritems():\n","  print(colname, \"min_val\", col.min(), \"max_val\", col.max())"],"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["typicalFacadeGlazingRatio min_val 0.7 max_val 0.9\n","typicalFacadeWindowWidth min_val 2 max_val 4\n","groundFacadeGlazingRatio min_val 0.7 max_val 0.9\n","groundFacadeWindowWidth min_val 2 max_val 4\n","buildingDepth min_val 15 max_val 40\n","balconyWidth min_val 1 max_val 6\n","atriumArea min_val 1000 max_val 3900\n","aspectRatio min_val 0.5 max_val 1.5\n","groundFloorHeight min_val 3.0 max_val 6.0\n","typicalfloorHeight min_val 2.5 max_val 3.0\n","numberLevels min_val 1 max_val 10\n","groundSDA min_val 26.1 max_val 100.0\n","firstSDA min_val 15.2 max_val 100.0\n","groundASE min_val 5.6 max_val 64.4\n","firstASE min_val 5.0 max_val 34.4\n","groundViewPercentage min_val 65.1 max_val 90.3\n","firstViewPercentage min_val 65.1 max_val 90.5\n"]}]},{"cell_type":"markdown","metadata":{"id":"f0F4fjWvDzXR"},"source":["##Prepare Data"]},{"cell_type":"markdown","metadata":{"id":"ZYVDwtH4a9TU"},"source":["**NORMALIZE INPUTS**"]},{"cell_type":"code","metadata":{"id":"OLbdqNZUI_n0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654429488513,"user_tz":-60,"elapsed":202,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"aaf6e807-4460-4f50-89b6-21352979ae7c"},"source":["#same code as last time\n","\n","#declare features\n","#X = data.iloc[:,1:-1]\n","X = data[[\"typicalFacadeGlazingRatio\", \"typicalFacadeWindowWidth\", \"groundFacadeGlazingRatio\", \"groundFacadeWindowWidth\", \"buildingDepth\", \"balconyWidth\", \"atriumArea\", \"aspectRatio\", \"groundFloorHeight\", \"typicalfloorHeight\", \"numberLevels\"]]   \n","\n","# Load and instantiate a StandardSclaer \n","from sklearn.preprocessing import StandardScaler\n","scalerX = StandardScaler()\n","\n","# Apply the scaler to our X-features\n","X_scaled = scalerX.fit_transform(X)\n","\n","print(X_scaled.shape)"],"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["(2933, 11)\n"]}]},{"cell_type":"code","metadata":{"id":"OtTK5LuUaqcI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654429499923,"user_tz":-60,"elapsed":216,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"5799c3d2-91be-4f0a-e693-8ef328b6fa5c"},"source":["#declare regression target\n","#y = data.loc[:,\"wage_per_hour\"].to_numpy()\n","y = data.loc[:, [\"groundSDA\", \"firstSDA\", \"groundASE\", \"firstASE\", \"groundViewPercentage\", \"firstViewPercentage\"]].to_numpy()\n","\n","#y = y.reshape(-1, 1)\n","\n","from sklearn.preprocessing import MinMaxScaler\n","scalerY = MinMaxScaler()\n","\n","\n","#In this case it makes sense to use MinMax scaling because the wage seems like a relative range\n","# Apply the scaler to our Y-features\n","y_scaled = scalerY.fit_transform(y)\n","\n","print(y_scaled.shape)\n","print(y_scaled)\n"],"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["(2933, 6)\n","[[1.         0.25707547 0.2755102  0.24489796 0.48015873 0.47637795]\n"," [0.32070365 0.09316038 0.1377551  0.10204082 0.91269841 0.51574803]\n"," [0.73612991 0.10259434 0.23809524 0.10884354 0.50793651 0.51968504]\n"," ...\n"," [0.9932341  0.20518868 0.24659864 0.24489796 0.51984127 0.84645669]\n"," [0.29499323 0.17688679 0.15646259 0.18707483 0.87301587 0.56299213]\n"," [0.29499323 0.19929245 0.08163265 0.26190476 0.54365079 0.16141732]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"zK5Y5r1iID3q"},"source":["**SPLIT INTO TRAIN AND TEST**"]},{"cell_type":"code","metadata":{"id":"lZAV56sSIKlm","executionInfo":{"status":"ok","timestamp":1654429506993,"user_tz":-60,"elapsed":289,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.2, random_state = 21)"],"execution_count":74,"outputs":[]},{"cell_type":"code","metadata":{"id":"SiKj7ifPJr5E","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654429508882,"user_tz":-60,"elapsed":205,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"3bd1529c-b696-4d58-ffd9-3433e3fda15a"},"source":["#visualize our data\n","#we can see that scikitlearn doesnt care if it is a dataframe or a numpy array, because they all function on the same way \n","print(\"TRAIN\", \"input\", X_train.shape, \"output\", y_train.shape)\n","print(\"TEST\", \"input\", X_test.shape, \"output\", y_test.shape)\n","print(X_test)\n","print(y_test)"],"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["TRAIN input (2346, 11) output (2346, 6)\n","TEST input (587, 11) output (587, 6)\n","[[-0.00911671 -1.22782842 -1.4195245  ...  0.46122863  0.33861712\n","  -1.53896723]\n"," [-0.00911671  0.00462222  1.38321219 ... -0.00573153 -0.99091972\n","   0.89584329]\n"," [-0.00911671 -1.22782842 -1.4195245  ... -0.47269168 -0.99091972\n","  -0.495477  ]\n"," ...\n"," [-0.00911671  0.00462222 -0.01815615 ... -0.00573153  1.00338554\n","   0.54801322]\n"," [-1.41644867  1.23707285 -0.01815615 ... -0.58943172  0.33861712\n","  -1.53896723]\n"," [-0.00911671 -1.22782842 -0.01815615 ... -0.58943172  1.66815396\n","  -1.19113715]]\n","[[1.         0.48113208 0.51870748 0.63605442 0.52380952 0.04330709]\n"," [0.97158322 0.17570755 0.23469388 0.22108844 0.38888889 0.95669291]\n"," [0.23545332 0.12028302 0.14965986 0.1292517  0.51984127 0.22834646]\n"," ...\n"," [0.35994587 0.09080189 0.15986395 0.1292517  0.51587302 0.53543307]\n"," [0.99729364 0.62617925 0.3962585  0.52380952 0.1984127  0.43700787]\n"," [0.31123139 0.14740566 0.18707483 0.13605442 0.52380952 0.49212598]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"d7cAwh56dZ9x"},"source":["#Build model"]},{"cell_type":"markdown","metadata":{"id":"QB79eIKLHPKC"},"source":["From the cheatSheet\n","Regression between 0 and 1>> \n","      activation = relu for hidden layers / sigmoid for final layer\n","      loss = mean squared error\n","      optimizer = adam\n","      input from data, is 8 columns\n","      output is 1 value prediction"]},{"cell_type":"code","metadata":{"id":"vm8wVMjXGbU2","executionInfo":{"status":"ok","timestamp":1654429561714,"user_tz":-60,"elapsed":201,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}}},"source":["# Instantiate a sequential model\n","#tf.seed(5)\n","#model.save()\n","model = tf.keras.models.Sequential()\n","n_cols = X_scaled.shape[1]  \n","\n","# Add 2 dense layers of 50 and 32 neurons each\n","model.add(tf.keras.layers.Dense(50, input_shape=(n_cols,), activation='relu'))\n","model.add(tf.keras.layers.Dense(32, activation='relu'))\n","model.add(tf.keras.layers.Dense(6, activation='relu'))\n","  \n","# Add a dense layer with 1 value output\n","#model.add(tf.keras.layers.Dense(1, activation= \"linear\"))\n","  \n","# Compile your model \n","model.compile(optimizer = \"adam\", loss = \"mean_squared_error\")\n"],"execution_count":82,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"HMwc8KW2oZ9D","executionInfo":{"status":"ok","timestamp":1654428663298,"user_tz":-60,"elapsed":188,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"id":"nz9jL30qH-XD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654429563526,"user_tz":-60,"elapsed":230,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"7e5990ea-1112-4857-e120-ec48a057cb9e"},"source":["model.summary()"],"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_13\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_63 (Dense)            (None, 50)                600       \n","                                                                 \n"," dense_64 (Dense)            (None, 32)                1632      \n","                                                                 \n"," dense_65 (Dense)            (None, 6)                 198       \n","                                                                 \n","=================================================================\n","Total params: 2,430\n","Trainable params: 2,430\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"pvaLenUEHmpg"},"source":["#Train model"]},{"cell_type":"code","metadata":{"id":"HRiRCUglH33Z"},"source":["# Fit your model to the training data for 200 epochs\n","#we assign this to history variable so we can plot the training data\n","history = model.fit(X_train,y_train,epochs=200, validation_split=0.2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"19U1b6Khep0d","colab":{"base_uri":"https://localhost:8080/","height":627},"executionInfo":{"status":"ok","timestamp":1654429643881,"user_tz":-60,"elapsed":537,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"0a4abfd3-7eb5-4c40-80b0-6b972adac408"},"source":["# summarize history for accuracy\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('loss function')\n","plt.ylabel('mse')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":85,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"XzKD6OTtLBYd"},"source":["#Evaluate model on test data\n","\n"]},{"cell_type":"code","metadata":{"id":"2D2Ih0D1Kp7X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654429652935,"user_tz":-60,"elapsed":199,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"d44ede10-dc03-4312-9f23-b88ca07bca5f"},"source":["# Evaluate your model accuracy on the test data\n","loss_test = model.evaluate(X_test,y_test)\n","\n","# Print accuracy\n","print('mse_test:', loss_test)"],"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["19/19 [==============================] - 0s 2ms/step - loss: 0.0013\n","mse_test: 0.0012851990759372711\n"]}]},{"cell_type":"markdown","metadata":{"id":"lhnPDKogffYb"},"source":["#Plot error\n"]},{"cell_type":"code","metadata":{"id":"L3KJsKY7mkNN"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Pa1cXJYl6uE","executionInfo":{"status":"ok","timestamp":1654429656479,"user_tz":-60,"elapsed":200,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}}},"source":["def plot_comparison(x_val, pred, truth, xlab, ylab):\n","  fig, ax1 = plt.subplots()\n","  ax1.plot(x_val, truth, color = \"red\", label = \"truth\",linestyle='None', marker = \"o\", markersize = 5)\n","  ax1.plot(x_val, pred, color = \"blue\", label = \"pred\",linestyle='None', marker = \"o\", markersize = 4, alpha = 0.5)\n","\n","  ax1.set_xlabel(xlab)\n","  ax1.set_ylabel(ylab)\n","  ax1.legend()\n","  fig.set_figheight(10)\n","  fig.set_figwidth(20)\n","  plt.title('Prediction Comparison')\n","  plt.show()"],"execution_count":87,"outputs":[]},{"cell_type":"code","metadata":{"id":"RfwC2ESgjTo7","colab":{"base_uri":"https://localhost:8080/","height":611},"executionInfo":{"status":"ok","timestamp":1654429659327,"user_tz":-60,"elapsed":761,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"b353e929-e4f1-4395-dee4-7107a6e1400e"},"source":["y_pred = scalerY.inverse_transform(model.predict(X_test))\n","y_truth = scalerY.inverse_transform(y_test)\n","\n","plt.scatter(y_truth,y_pred)"],"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7f0fb4644bd0>"]},"metadata":{},"execution_count":88},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#RADIATION PREDICTIONS\n","y_pred_01 = y_pred[:,0]\n","print(y_pred_01.shape)"],"metadata":{"id":"rMfLsOW1X08O","executionInfo":{"status":"ok","timestamp":1654429668335,"user_tz":-60,"elapsed":247,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"047ce83b-a349-4995-eac4-4e62de8569fb","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["(587,)\n"]}]},{"cell_type":"code","source":["#RADIATION TRUTH\n","y_truth_01 = y_truth[:,0]\n","print(y_truth_01.shape)"],"metadata":{"id":"H1-g37wPX3Yc","executionInfo":{"status":"ok","timestamp":1653903838006,"user_tz":-60,"elapsed":191,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"d8473fa4-40e3-48fa-b41a-bca29cb8ec07","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(594,)\n"]}]},{"cell_type":"code","metadata":{"id":"hn8zoGe8mfBT"},"source":["age_test = (scalerX.inverse_transform(X_test)[:,3])\n","print(age_test)\n","\n","exp_test = (scalerX.inverse_transform(X_test)[:,2])\n","\n","plot_comparison(age_test, y_pred, y_truth, \"groundSDA\", \"groundSDA\")\n","plot_comparison(exp_test, y_pred, y_truth,  \"firstSDA\", \"firstSDA\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6abeDxfon1UB"},"source":["error = y_pred - y_truth\n","plt.hist(error, bins=25)\n","plt.xlabel('Prediction Error [USD/hour]')\n","_ = plt.ylabel('Count')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["model saving"],"metadata":{"id":"EGz1ANcUxfd4"}},{"cell_type":"code","source":["#https://www.tensorflow.org/guide/keras/save_and_serialize\n","model.save(\"/content/gdrive/MyDrive/ColabNotebooks/DataEncoding/atrium_SDA+ASE_regression_analysis/atriumModel1.h5\")\n","\n","\n","\n","scalerX_filename = \"/content/gdrive/MyDrive/ColabNotebooks/DataEncoding/atrium_SDA+ASE_regression_analysis/scalerXAtoB.save\"\n","joblib.dump(scalerX, scalerX_filename)\n","\n","scalerY_filename = \"/content/gdrive/MyDrive/ColabNotebooks/DataEncoding/atrium_SDA+ASE_regression_analysis/scalerYAtoB.save\"\n","joblib.dump(scalerY, scalerY_filename)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_SMvLzexxjV8","executionInfo":{"status":"ok","timestamp":1654432747327,"user_tz":-60,"elapsed":530,"user":{"displayName":"Michal Gryko","userId":"04494246827515006595"}},"outputId":"0990c402-b570-430f-d9a7-e2feeb4951a4"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['/content/gdrive/MyDrive/ColabNotebooks/DataEncoding/atrium_SDA+ASE_regression_analysis/scalerYAtoB.save']"]},"metadata":{},"execution_count":94}]}]}